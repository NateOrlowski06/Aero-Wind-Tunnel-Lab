%%ASEN 2502 Wind Tunnel Lab
% Author:
% Lab Description: Employ basic experimental wind tunnel testing procedures,
% conduct flow measurements, and develop an awareness for sources of
% error/error analysis as part of a team.  Validate the AES PILOT
% Low-SpeedWind Tunnel through the evaluation of a Clark Y-14 airfoil
% and comparingthe results to the published National Advisory Committee
% for Aeronautics (NACA) results from 1938.
%
% Inputs:
% - Raw Wind Tunnel CSV data files for tests
% - Airfoil Static Port Locations
% - Comparison NACA Clark Y Data
%
% Outputs:
%
%
%% Intialize Workspace
clear; clc; close all; % Clear workspace, command window, and close all figures
addpath(genpath('15 mps Data Files')); %Adds 15 m/s test data files folder and subfolders
addpath(genpath('30 mps Data Files')); %Adds 30 m/s test data files folder and subfolders
%% Import Airfoil Port Locations
PortsTable = readtable('Port_Locations.xlsx','Sheet','Port_Locations'); %Read in CSV file with port locations
Ports = table2array(PortsTable);
SegmentsTable = readtable('Port_Locations.xlsx','Sheet','Segments'); %Read in segment information from CSV file
Segments = table2array(SegmentsTable(:,2:3));
%% Search Data Folders, Pull File Names & Count Data Files
% Get filenames for test data files
fileLoc = '15 mps Data Files/';
list = dir([fileLoc, '*AoA*']); % This lists all files in fileLoc with 'WTData' in the file name
numFiles = length(list);
for i = 1:numFiles
   fileNames15{i} = [fileLoc, list(i).name]; % This makes a string of the complete file name with the path in front of it
   AoA15(i) = str2num(char(extractBetween(list(i).name, 'AoA_', '.csv'))); % Finds the angle of attack value in the name and make it a usable number
end
fileNames15 = string(fileNames15); % Convert to char array from cell array
AoA_Count15 = length(AoA15); %Counts number of AoAs tested

fileLoc = '30 mps Data Files/';
list = dir([fileLoc, '*AoA*']); % This lists all files in fileLoc with 'WTData' in the file name
numFiles = length(list);
for i = 1:numFiles
   fileNames30{i} = [fileLoc, list(i).name]; % This makes a string of the complete file name with the path in front of it
   AoA30(i) = str2num(char(extractBetween(list(i).name, 'AoA_', '.csv'))); % Finds the angle of attack value in the name and make it a usable number
end
fileNames30 = string(fileNames30); % Convert to char array from cell array
AoA_Count30 = length(AoA30); %Counts number of AoAs tested


Data15 = zeros(numFiles,25); %Conditioned wind tunnel data file 15 m/s
Data30 = zeros(numFiles,25); %Conditioned wind tunnel data file 30 m/s







%%%%Our code begins%%%%%%%



%%Convert raw 15mps data files into Data15
for j = 1:numFiles
   RawData15 = readmatrix(fileNames15(j),'NumHeaderLines',1); % load the data
   %Condition data
   Data15(j,1) = AoA15(j); %Sets AoA (deg) as 1st column
   Data15(j,2) = mean(RawData15(:,4)); %Sets mean of velocity measurements as 2nd column
   Data15(j,3) = mean(RawData15(:,2)); %Sets mean of total pressure (atmosphere) as 3rd column
   Data15(j,4) = mean(RawData15(:,1)); %Sets mean of temperature (atmosphere) as 4th column
   Data15(j,5) = mean(RawData15(:,3)); %Sets mean of calculaed density (atmosphere) as 5th column
   Data15(j,6) = mean(RawData15(:,5)); %Sets mean of test section dynamic pressure as 6th column
   Data15(j,7) = Data15(j,3) - Data15(j,6); %Calculates test section static pressure by calculating Po - q
   %Calculate airfoil port static pressures from measured differential
   %pressues (P_port - P_static_test) & sets columns 8 - 24 as airfoil static port pressure values (calculated)
  
   Data15(j,8) = mean(RawData15(:,15)); %Airfoil scanivalve port 1
   Data15(j,9) = mean(RawData15(:,16)); %Airfoil scanivalve port 2
   Data15(j,10) = mean(RawData15(:,17)); %Airfoil scanivalve port 3
   Data15(j,11) = mean(RawData15(:,18)); %Airfoil scanivalve port 4
   Data15(j,12) = mean(RawData15(:,19)); %Airfoil scanivalve port 5
   Data15(j,13) = mean(RawData15(:,20)); %Airfoil scanivalve port 6
   Data15(j,14) = mean(RawData15(:,21)); %Airfoil scanivalve port 7
   Data15(j,15) = mean(RawData15(:,22)); %Airfoil scanivalve port 8
   Data15(j,16) = mean(RawData15(:,23)); %Airfoil scanivalve port 9
   Data15(j,17) = 0; %TE - Assume Airfoil trailing edge pressure = test section static pressure
   Data15(j,18) = mean(RawData15(:,24)); %Airfoil scanivalve port 10
   Data15(j,19) = mean(RawData15(:,25)); %Airfoil scanivalve port 11
   Data15(j,20) = mean(RawData15(:,26)); %Airfoil scanivalve port 12
   Data15(j,21) = mean(RawData15(:,27)); %Airfoil scanivalve port 13
   Data15(j,22) = mean(RawData15(:,28)); %Airfoil scanivalve port 14
   Data15(j,23) = mean(RawData15(:,29)); %Airfoil scanivalve port 15
   Data15(j,24) = mean(RawData15(:,30)); %Airfoil scanivalve port 16
   Data15(j,25) = Data15(j,8); %Repeats port 1 (leading edge)
end
Data15 = sortrows(Data15,1); %Sorts data by increasing AoA


%Convert raw 30mps data into Data30 
for j = 1:numFiles
   RawData30 = readmatrix(fileNames30(j),'NumHeaderLines',1); % load the data
   %Condition data
   Data30(j,1) = AoA30(j); %Sets AoA (deg) as 1st column
   Data30(j,2) = mean(RawData30(:,4)); %Sets mean of velocity measurements as 2nd column
   Data30(j,3) = mean(RawData30(:,2)); %Sets mean of total pressure (atmosphere) as 3rd column
   Data30(j,4) = mean(RawData30(:,1)); %Sets mean of temperature (atmosphere) as 4th column
   Data30(j,5) = mean(RawData30(:,3)); %Sets mean of calculaed density (atmosphere) as 5th column
   Data30(j,6) = mean(RawData30(:,5)); %Sets mean of test section dynamic pressure as 6th column
   Data30(j,7) = Data30(j,3) - Data30(j,6); %Calculates test section static pressure by calculating Po - q
   %Calculate airfoil port static pressures from measured differential
   %pressues (P_port - P_static_test) & sets columns 8 - 24 as airfoil static port pressure values (calculated)
  
   Data30(j,8) = mean(RawData30(:,15)); %Airfoil scanivalve port 1
   Data30(j,9) = mean(RawData30(:,16)); %Airfoil scanivalve port 2
   Data30(j,10) = mean(RawData30(:,17)); %Airfoil scanivalve port 3
   Data30(j,11) = mean(RawData30(:,18)); %Airfoil scanivalve port 4
   Data30(j,12) = mean(RawData30(:,19)); %Airfoil scanivalve port 5
   Data30(j,13) = mean(RawData30(:,20)); %Airfoil scanivalve port 6
   Data30(j,14) = mean(RawData30(:,21)); %Airfoil scanivalve port 7
   Data30(j,15) = mean(RawData30(:,22)); %Airfoil scanivalve port 8
   Data30(j,16) = mean(RawData30(:,23)); %Airfoil scanivalve port 9
   Data30(j,17) = 0; %TE - Assume Airfoil trailing edge pressure = test section static pressure
   Data30(j,18) = mean(RawData30(:,24)); %Airfoil scanivalve port 10
   Data30(j,19) = mean(RawData30(:,25)); %Airfoil scanivalve port 11
   Data30(j,20) = mean(RawData30(:,26)); %Airfoil scanivalve port 12
   Data30(j,21) = mean(RawData30(:,27)); %Airfoil scanivalve port 13
   Data30(j,22) = mean(RawData30(:,28)); %Airfoil scanivalve port 14
   Data30(j,23) = mean(RawData30(:,29)); %Airfoil scanivalve port 15
   Data30(j,24) = mean(RawData30(:,30)); %Airfoil scanivalve port 16
   Data30(j,25) = Data30(j,8); %Repeats port 1 (leading edge)
end
Data30 = sortrows(Data30,1); %Sorts data by increasing AoA




%Chord length calculation
dX = Ports(1,2) - Ports(10,2);
dY = Ports(1,3) - Ports(10,3);
ChordLength = sqrt(dX^2 + dY^2);





%%%%%%%%%%%%%%%15 meters per second calculations%%%%%%%%%%%%%%%%%%%%%
Calculated_Values15 = zeros(30,5);

%Force calculations
%Loops over every AoA for 15m/s
for i = 1:30
   N_upper_sum = 0;
   A_upper_sum = 0;
   N_lower_sum = 0;
   A_lower_sum = 0;

   %Loops over upper surface, from leading edge to trailing edge
   for j = 8:16
       Index = j-7; % 1...9
       N_upper_sum = N_upper_sum  - 0.5*(Data15(i,j) + Data15(i,j+1)) * Segments(Index,1);
       A_upper_sum = A_upper_sum  + 0.5*(Data15(i,j) + Data15(i,j+1)) * Segments(Index,2);
   end

   %Loops over lower surface from leading edge to trailing edge
   for j = 25:-1:18
       Index = -1*j + 35;
       N_lower_sum = N_lower_sum + 0.5*(Data15(i,j) + Data15(i,j-1)) * Segments(Index,1);
       A_lower_sum = A_lower_sum - 0.5*(Data15(i,j) + Data15(i,j-1)) * Segments(Index,2);
   end
  
   NormalForce = N_upper_sum + N_lower_sum;
   AxialForce  = A_upper_sum + A_lower_sum;

   %Storing all calculated values into array
   %Order of storage: AoA, Fa, Fn, Fl, Cl
   Calculated_Values15(i,1) = Data15(i,1);
   Calculated_Values15(i,2) = AxialForce;
   Calculated_Values15(i,3) = NormalForce;

   %Lift force calculations
   Lift_Force = NormalForce * cosd(Data15(i,1)) - AxialForce * sind(Data15(i,1));
   Calculated_Values15(i,4) = Lift_Force;

   %Coefficient of Lift Calculation
   FreeStreamDynPressure = 0.5 * Data15(i,5) * Data15(i,2)^2;
   Coefficient_lift = Lift_Force / (FreeStreamDynPressure * ChordLength);
   Calculated_Values15(i,5) = Coefficient_lift;
end




% Arrays to store Coefficient of pressure and velocities at each port
VelUpper15 = zeros(9, 31);
VelLower15 = zeros(8, 31);
CpUpper15 = zeros(9,31);
CpLower15 = zeros(8,31);


%Calculates normalized chord (x/c) for each point along upper and lower surface
for i = 1:9
   x_pos = Ports(i, 2);
   nChord = x_pos / ChordLength;
   VelUpper15(i, 1) = nChord;
   CpUpper15(i,1) = nChord;
end
for i = 1:8
   index = 19 - i;
   x_pos = Ports(index, 2);
   nChord = x_pos / ChordLength;
   VelLower15(i, 1) = nChord;
   CpLower15(i,1) = nChord;
end


%Calculations for velocity over each port
%Loops over every AoA
for i = 1:30

   %Loops from leading edge to last port on upper surface
   for j = 1:9
       index = j + 7;

       %Velocity calculation at each port
       Velocity = sqrt((2 * (abs(Data15(i, index))) / Data15(i, 5)));
       VelUpper15(j, i+1) = Velocity;

       %Coefficient of pressure calculation at each port
       CpUpper15(j,i+1) = Data15(i,index) / Data15(i,6);
   end

   %Loops from leading edge to last port on lower surface
   for j = 18:-1:11
       index = j + 7;

       %Velocity calculation at each port
       Velocity = sqrt((2 * (abs(Data15(i, index))) / Data15(i, 5)));
       VelLower15(19 - j, i+1) = Velocity;

       %Coefficient of pressure calculation at each port
       CpLower15(19-j,i+1) = Data15(i,index) / Data15(i,6);
  
   end
end

[MinCoefficient15, ZeroLiftIndex15] = min(abs(Calculated_Values15(: , 5)));



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%30 meters per second calculations copy pasted from 15 changed to 30

Calculated_Values30 = zeros(30,5);

%Force calculations
%Loops over every AoA for 30m/s
for i = 1:30
   N_upper_sum = 0;
   A_upper_sum = 0;
   N_lower_sum = 0;
   A_lower_sum = 0;

   %Loops over upper surface, from leading edge to trailing edge
   for j = 8:16
       Index = j-7; % 1...9
       N_upper_sum = N_upper_sum  - 0.5*(Data30(i,j) + Data30(i,j+1)) * Segments(Index,1);
       A_upper_sum = A_upper_sum  + 0.5*(Data30(i,j) + Data30(i,j+1)) * Segments(Index,2);
   end

   %Loops over lower surface from leading edge to trailing edge
   for j = 25:-1:18
       Index = -1*j + 35;
       N_lower_sum = N_lower_sum + 0.5*(Data30(i,j) + Data30(i,j-1)) * Segments(Index,1);
       A_lower_sum = A_lower_sum - 0.5*(Data30(i,j) + Data30(i,j-1)) * Segments(Index,2);
   end
  
   NormalForce = N_upper_sum + N_lower_sum;
   AxialForce  = A_upper_sum + A_lower_sum;

   %Storing all calculated values into array
   %Order of storage: AoA, Fa, Fn, Fl, Cl
   Calculated_Values30(i,1) = Data30(i,1);
   Calculated_Values30(i,2) = AxialForce;
   Calculated_Values30(i,3) = NormalForce;

   %Lift force calculations
   Lift_Force = NormalForce * cosd(Data30(i,1)) - AxialForce * sind(Data30(i,1));
   Calculated_Values30(i,4) = Lift_Force;

   %Coefficient of Lift Calculation
   FreeStreamDynPressure = 0.5 * Data30(i,5) * Data30(i,2)^2;
   Coefficient_lift = Lift_Force / (FreeStreamDynPressure * ChordLength);
   Calculated_Values30(i,5) = Coefficient_lift;
end




%Arrays to store coefficient of pressure  and velocities at each port
VelUpper30 = zeros(9, 31);
VelLower30 = zeros(8, 31);
CpUpper30 = zeros(9,31);
CpLower30 = zeros(8,31);


%Calculates normalized chord (x/c) for each point along upper and lower surface
for i = 1:9
   x_pos = Ports(i, 2);
   nChord = x_pos / ChordLength;
   VelUpper30(i, 1) = nChord;
   CpUpper30(i,1) = nChord;
end
for i = 1:8
   index = 19 - i;
   x_pos = Ports(index, 2);
   nChord = x_pos / ChordLength;
   VelLower30(i, 1) = nChord;
   CpLower30(i,1) = nChord;
end

%Calculations for velocity over each port
%Loops over every AoA
for i = 1:30

   %Loops from leading edge to last port on upper surface
   for j = 1:9
       index = j + 7;

       %Velocity calculation at each port
       Velocity = sqrt((2 * (abs(Data30(i, index))) / Data30(i, 5)));
       VelUpper30(j, i+1) = Velocity;

       %Coefficient of pressure calculation at each port
       CpUpper30(j,i+1) = Data30(i,index) / Data30(i,6);
   end

   %Loops from leading edge to last port on lower surface
   for j = 18:-1:11
       index = j + 7;

       %Velocity calculation at each port
       Velocity = sqrt((2 * (abs(Data30(i, index))) / Data30(i, 5)));
       VelLower30(19 - j, i+1) = Velocity;

       %Coefficient of pressure calculation at each port
       CpLower30(19-j,i+1) = Data30(i,index) / Data30(i,6);
  
   end
end


[MinCoefficient, ZeroLiftIndex30] = min(abs(Calculated_Values30(: , 5)));



%Loading in Y14 NACA data
NACA = readmatrix("ClarkY14_NACA_TR628.xlsx");







%% Plots for 15 m/s
% Velocity vs normalized chord (x/c)
% 6 degrees
figure;
subplot(3,3,1);
plot(VelUpper15(1:9, 1), VelUpper15(1:9, 22), 'r')
hold on
plot(VelLower15(1:8, 1), VelLower15(1:8, 22), 'b')
legend('Upper Velocity', 'Lower Velocity')
title('Velocity vs Normalized Chord')
subtitle('6 Degree AoA 15 m/s')
hold off

% 0 Lift
subplot(3, 3, 2);
plot(VelUpper15(1:9, 1), VelUpper15(1:9, ZeroLiftIndex15 + 1), 'r')
hold on
plot(VelLower15(1:8, 1), VelLower15(1:8, ZeroLiftIndex15 + 1), 'b')
legend('Upper Velocity', 'Lower Velocity')
title('Velocity vs Normalized Chord')
subtitle('Zero Lift 15 m/s')

hold off

% Stall 10 degrees 
subplot(3, 3, 3);
plot(VelUpper15(1:9, 1), VelUpper15(1:9, 26), 'r')
hold on
plot(VelLower15(1:8, 1), VelLower15(1:8, 26), 'b')
legend('Upper Velocity', 'Lower Velocity')
title('Velocity vs Normalized Chord')
subtitle('Stall Angle 15 m/s')
hold off


% Coefficient of Pressure vs normalized chord (x/c)
%6 degrees 
subplot(3,3,4);
plot(CpUpper15(1:9, 1), CpUpper15(1:9, 22), 'r')
hold on
plot(CpLower15(1:8, 1), CpLower15(1:8, 22), 'b')
legend('Upper Cp', 'Lower Cp')
title('Coefficient of Pressure vs Normalized Chord')
subtitle('6 Degree AoA 15 m/s')
hold off

%Zero lift
subplot(3,3,5);
plot(CpUpper15(1:9, 1), CpUpper15(1:9, ZeroLiftIndex15 + 1), 'r')
hold on
plot(CpLower15(1:8, 1), CpLower15(1:8, ZeroLiftIndex15 + 1), 'b')
legend('Upper Cp', 'Lower Cp')
title('Coefficient of Pressure vs Normalized Chord')
subtitle('Zero Lift 15 m/s')

%Stall
subplot(3,3,6);
plot(CpUpper15(1:9, 1), CpUpper15(1:9, 26), 'r')
hold on
plot(CpLower15(1:8, 1), CpLower15(1:8, 26), 'b')
legend('Upper Cp', 'Lower Cp')
title('Coefficient of Pressure vs Normalized Chord')
subtitle('Stall Angle 15 m/s')
hold off


% Coefficient of Lift vs Angle of Attack
subplot(3,3,7:9);
plot(Calculated_Values15(:,1) , Calculated_Values15(:,5));
hold on
plot(NACA(1:7,1) , NACA(1:7,2));
legend('Student Cl','NACA Cl')
title('AoA vs Coefficient of Lift');









%Plots for 30m/s
% Velocity vs normalized chord (x/c)
% 6 degrees
figure;
subplot(3,3,1);
plot(VelUpper30(1:9, 1), VelUpper30(1:9, 22), 'r')
hold on
plot(VelLower30(1:8, 1), VelLower30(1:8, 22), 'b')
legend('Upper Velocity', 'Lower Velocity')
title('Velocity vs Normalized Chord')
subtitle('6 Degree AoA 30 m/s')
hold off

% 0 Lift
subplot(3, 3, 2);
plot(VelUpper30(1:9, 1), VelUpper30(1:9, ZeroLiftIndex30 + 1), 'r')
hold on
plot(VelLower30(1:8, 1), VelLower30(1:8, ZeroLiftIndex30 + 1), 'b')
legend('Upper Velocity', 'Lower Velocity')
title('Velocity vs Normalized Chord')
subtitle('Zero Lift 30 m/s')

hold off

% Stall 10 degrees 
subplot(3, 3, 3);
plot(VelUpper30(1:9, 1), VelUpper30(1:9, 26), 'r')
hold on
plot(VelLower30(1:8, 1), VelLower30(1:8, 26), 'b')
legend('Upper Velocity', 'Lower Velocity')
title('Velocity vs Normalized Chord')
subtitle('Stall Angle 30 m/s')
hold off


% Coefficient of Pressure vs normalized chord (x/c)
%6 degrees 
subplot(3,3,4);
plot(CpUpper30(1:9, 1), CpUpper30(1:9, 22), 'r')
hold on
plot(CpLower30(1:8, 1), CpLower30(1:8, 22), 'b')
legend('Upper Cp', 'Lower Cp')
title('Coefficient of Pressure vs Normalized Chord')
subtitle('6 Degree AoA 30 m/s')
hold off

%Zero lift
subplot(3,3,5);
plot(CpUpper30(1:9, 1), CpUpper30(1:9, ZeroLiftIndex30 + 1), 'r')
hold on
plot(CpLower30(1:8, 1), CpLower30(1:8, ZeroLiftIndex30 + 1), 'b')
legend('Upper Cp', 'Lower Cp')
title('Coefficient of Pressure vs Normalized Chord')
subtitle('Zero Lift 30 m/s')

%Stall
subplot(3,3,6);
plot(CpUpper30(1:9, 1), CpUpper30(1:9, 26), 'r')
hold on
plot(CpLower30(1:8, 1), CpLower30(1:8, 26), 'b')
legend('Upper Cp', 'Lower Cp')
title('Coefficient of Pressure vs Normalized Chord')
subtitle('Stall Angle 30 m/s')
hold off


% Coefficient of Lift vs Angle of Attack
subplot(3,3,7:9);
plot(Calculated_Values30(:,1) , Calculated_Values30(:,5));
hold on
plot(NACA(1:7,1) , NACA(1:7,2));
legend('Student Cl','NACA Cl')
title('AoA vs Coefficient of Lift');
